#!/opt/bin/lv_micropython -i
import lvgl as lv
from lv_colors import lv_colors
from micropython import const
from constants import Constants
from gui.icon import Icon

class AppTile():
    app_entry = [None] * Constants.MAX_APPS_ICON
    app_cont  = [None] * Constants.MAX_APPS_TILES
    app_tile_num = [None] * Constants.MAX_APPS_TILES
    
    def __init__(self,mainbar):
        try:
            import ulogging as logging
        except:
            import logging

        log = logging.getLogger("AppTile")
        log.setLevel(logging.DEBUG)
        y=0
        for tile_no in range(Constants.MAX_APPS_TILES):
            id = "app tile %s"%(tile_no+1)
            self.app_cont[tile_no] =mainbar.add_tile(tile_no+1,y,id)
            log.debug("added tile no %d"%tile_no)
            
        app_style = lv.style_t()
        app_style.copy(mainbar.get_style())
        
        # create pool of icons
        log.debug("Creating pool of %d icons"%Constants.MAX_APPS_ICON)
        for app in range(Constants.MAX_APPS_ICON):
            self.app_entry[app] = Icon()
            self.app_entry[app].x = Constants.APP_FIRST_X_POS + ( ( app % Constants.MAX_APPS_ICON_HORZ ) * ( Constants.APP_ICON_X_SIZE + Constants.APP_ICON_X_CLEARENCE ) )
            self.app_entry[app].y = Constants.APP_FIRST_Y_POS + ( ( ( app % ( Constants.MAX_APPS_ICON_VERT * Constants.MAX_APPS_ICON_HORZ  ) ) //
                                                                 Constants.MAX_APPS_ICON_HORZ ) * ( Constants.APP_ICON_Y_SIZE + Constants.APP_ICON_Y_CLEARENCE ) )
            # create app container
            tile_no = app // ( Constants.MAX_APPS_ICON_HORZ * Constants.MAX_APPS_ICON_VERT)
            # print("app tile no: %d x: %x, y: %d"%(tile_no,self.app_entry[app].x,self.app_entry[app].y))
            self.app_entry[app].cont = lv.obj(self.app_cont[tile_no],None)
            mainbar.add_slide_element(self.app_entry[app].cont)
            self.app_entry[app].cont.add_style(lv.obj.PART.MAIN, app_style)
            # print("type of app_cont: ",type(self.app_cont[tile_no]))
            self.app_entry[app].cont.set_size( Constants.APP_ICON_X_SIZE, Constants.APP_ICON_Y_SIZE )
            self.app_entry[app].cont.align(self.app_cont[tile_no],lv.ALIGN.IN_TOP_LEFT, self.app_entry[app].x, self.app_entry[app].y )
            
            # create app label
            self.app_entry[app].label = lv.label(self.app_cont[tile_no ], None )
            mainbar.add_slide_element(self.app_entry[ app ].label)
            self.app_entry[app].label.add_style( lv.obj.PART.MAIN, app_style )
            self.app_entry[app].label.set_size(Constants.APP_LABEL_X_SIZE, Constants.APP_LABEL_Y_SIZE)
            self.app_entry[app].label.align(self.app_entry[app].cont, lv.ALIGN.OUT_BOTTOM_MID, 0, 30 )
            self.app_entry[app].cont.set_hidden(True)
            self.app_entry[app].label.set_hidden(True)
        
            log.debug("icon screen/x/y: %d/%d/%d"%(app / ( Constants.MAX_APPS_ICON_HORZ * Constants.MAX_APPS_ICON_VERT ), self.app_entry[ app ].x, self.app_entry[ app ].y ))
            
        mainbar.app_tile=self

    def register_app(self,appname):
        for app in range(Constants.MAX_APPS_ICON):
            print("app: ",app)
            if not self.app_entry[app].active:
                self.app_entry[app].active=True # reserve the icon
                self.app_entry[app].label.set_text(appname)
                self.app_entry[app].label.align(self.app_entry[app].cont,lv.ALIGN.OUT_BOTTOM_MID, 0, 0)
                self.app_entry[app].cont.set_hidden(False)
                self.app_entry[app].label.set_hidden(False)
                return self.app_entry[app]
        self.log.error("no space for an app icon")
        return None

    def get_free_app_icon(self):
        # get a free icon from the pool
        for app in range(Constants.MAX_APPS_ICON):
            if not self.app_entry[app].active:
                return self.app_entry[app]
        
        log.error("no space for an app icon");
        return None

    
